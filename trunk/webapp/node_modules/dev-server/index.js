const express = require('express')
const proxyMiddleware = require('http-proxy-middleware')
const opn = require('opn')
const chalk = require('chalk')
const logger = require('morgan')

function getExternalIP() {
    let ifaces = require('os').networkInterfaces()
    for (let dev of Object.keys(ifaces)) {
        for (let details of ifaces[dev]) {
            if (details.family === 'IPv4' && details.internal === false) {
                return details.address
            }
        }
    }
    return '127.0.0.1'
}


module.exports = function(port, webapp, proxyTable, open) {
    // 创建服务器
    let app = express()
    app.use(logger('dev')) // 日志输出

    // 首页
    let index = '/'


    console.log(chalk.cyan('\n> Initializing...'))

    // 发布页面
    Object.keys(webapp).forEach(function(context, i) {
        let target = webapp[context]
        app.use(context, express.static(target))
        console.log('DEPLOYED:', context, '->', target)
        if (i == 0) index = context
    })

    // 添加代理
    Object.keys(proxyTable).forEach(function(context) {
        let options = proxyTable[context]
        if (typeof options === 'string') {
            options = { target: options }
        }
        app.use(proxyMiddleware(options.filter || context, options))
    })

    // catch 404 and forward to error handler
    app.use(function(req, res, next) {
        let err = new Error('Not Found')
        err.status = 404
        next(err)
    })

    // error handler
    app.use(function(err, req, res, next) {
        console.error(err)
        let { status = 500, message } = err
        // set locals, only providing error in development
        res.locals.message = message
        res.locals.error = err
        // http status code
        res.status(status)
        res.send(message)
    })

    let uri = 'http://localhost:' + port + index
    let external = uri.replace('localhost', getExternalIP())

    let _resolve
    let readyPromise = new Promise(resolve => {
        _resolve = resolve
    })

    console.log(chalk.cyan('\n> Starting...'))

    // 启动服务器
    let server = app.listen(port, () => {
        console.log('   Local:', chalk.yellow(uri), '\nExternal:', chalk.yellow(external), '\n')
        open && opn(uri)
        _resolve()
    })

    server.on('error', (error) => {
        if (error.syscall !== 'listen') {
            throw error
        }

        let bind = typeof port === 'string' ?
            'Pipe ' + port :
            'Port ' + port

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges')
                process.exit(1)
                break
            case 'EADDRINUSE':
                console.error(bind + ' is already in use')
                process.exit(1)
                break
            default:
                throw error
        }
    })

    return {
        ready: readyPromise,
        close: () => {
            server.close()
        }
    }
}