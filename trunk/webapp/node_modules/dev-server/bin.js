#!/usr/bin/env node

const program = require('commander')
const fs = require('fs')
const devServer = require('./index')
const pkg = require('./package.json')

function listTable(value) {
    let table = {}
    value.split(',').forEach(x => {
        let context = '/', target
        if (x.indexOf('->') > -1) {
            [context, target] = x.split('->')
        } else {
            target = x
        }
        table[context] = target
    })
    return table
}

program
    .version(pkg.version)
    .description(`${pkg.name}(${pkg.description}) by ${pkg.author}`)
    .option('-p, --port <n>', '设置端口(8000)', parseInt)
    .option('-d, --deploy <list>', '发布页面: `context`->`target` 多个逗号分隔', listTable)
    .option('-x, --proxy <list>', '配置代理: `context`->`target` 多个逗号分隔', listTable)
    .option('-c, --config <file>', '配置文件(.json)')
    .option('-o, --open', '浏览器中打开')
    .parse(process.argv)

let ready = !!program.deploy

// 页面
let webapp = {}
// 代理
let proxyTable = {}
// 端口
let port = program.port || 8000

if (program.proxy) {
    proxyTable = program.proxy
}

if (program.deploy) {
    webapp = program.deploy
    ready = true
}

if (program.proxy) {
    proxyTable = program.proxy
}

if (program.config) {
    try {
        let config = fs.readFileSync(program.config, 'utf-8')
        let { deploy, proxy } = JSON.parse(config)
        if (!config || !deploy) throw new Error('invalid config')
        webapp = deploy
        if (proxy) proxyTable = proxy
        ready = true
    } catch (e) {
        console.error('`--config`读取配置失败：' + e.message)
        process.exit(1)
    }
}

if (!ready) {
    console.error('缺少必要参数，`--help`查看帮助')
    process.exit(1)
}

if (!webapp) {
    console.error('deploy参数错误')
    process.exit(1)
}

devServer(port, webapp, proxyTable, program.open)